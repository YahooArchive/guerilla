#!/usr/bin/env python3

import sys
import os
import io
from http.client import *
import urllib.parse

from stetho_open import *

def main():
  # Manually parse out -p <process>, all other option handling occurs inside
  # the hosting process.
  process = None
  args = sys.argv[1:]
  if len(args) > 0 and (args[0] == '-p' or args[0] == '--process'):
    if len(args) < 2:
      sys.exit('Missing <process>')
    else:
      process = args[1]
      args = args[2:]

  # Connect to ANDROID_SERIAL if supplied, otherwise fallback to any
  # transport.
  device = os.environ.get('ANDROID_SERIAL')
  try:
    conn = HTTPConnectionOverADB(device, process)
    query_params = ['argv=' + urllib.parse.quote(arg) for arg in args]
    url = '/dumpapp?%s' % ('&'.join(query_params))
    fake_host = { 'Host': 'localhost:5037' }

    http_method = None
    body = None
    if not sys.stdin.isatty():
      http_method = 'POST'
      body = sys.stdin.detach().read()
    else:
      http_method = 'GET'
      body = None

    conn.request(http_method, url, body, fake_host)

    reply = conn.getresponse()

    if reply.status != 200:
      raise Exception('Unexpected HTTP reply from Stetho: %d' % (reply.status))

    read_frames(reply)
  except HumanReadableError as e:
    sys.exit(e)
  except BrokenPipeError as e:
    sys.exit(0)
  except KeyboardInterrupt:
    sys.exit(1)

def read_frames(conn):
  while True:
    # All frames have a single character code followed by a big-endian int
    code = read_input(conn, 1, 'code')
    n = struct.unpack('!L', read_input(conn, 4, 'int4'))[0]

    if code == b'1':
      if n > 0:
        sys.stdout.buffer.write(read_input(conn, n, 'stdout blob'))
    elif code == b'2':
      if n > 0:
        sys.stderr.buffer.write(read_input(conn, n, 'stderr blob'))
        sys.stderr.buffer.flush()
    elif code == b'x':
      sys.exit(n)
    else:
      if raise_on_eof:
        raise IOError('Unexpected header: %s' % code)
      break

def read_input(conn, n, tag):
  data = conn.read(n)
  if not data or len(data) != n:
    raise IOError('Unexpected end of stream while reading %s.' % tag)
  return data

class HTTPConnectionOverADB(HTTPConnection):
  def __init__(self, device, process):
    super(HTTPConnectionOverADB, self).__init__('localhost', 5037)
    self._device = device
    self._process = process

  def connect(self):
    self.sock = stetho_open(device=self._device, process=self._process)
 
if __name__ == '__main__':
  main()

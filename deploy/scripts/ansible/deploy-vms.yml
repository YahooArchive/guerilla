#Assumes that host-setup.sh has run on each target machine.
#Assumes that clone-repo.sh has been run locally 
#TODO use variables instead of hard-coded paths
#TODO run host-setup.sh from here or  get git clone to work from ansible, or have one script that invokes host-setup.sh and this script.
#TODO use variables to link host-setup.sh and this file.

- hosts: host
  roles:
    - vm-deploy
  tasks:
   
   - name: Ensure that the copy target vm1 dir exists
     file: path={{ host_sharing_guerilla_dir }}/vm1/DataDir state=directory owner={{ host_shared_owner }}

   - name: Ensure that the copy target vm2 dir exists
     file: path=path={{ host_sharing_guerilla_dir }}/vm2/DataDir state=directory owner={{ host_shared_owner }}

   - name: copy worker configs for all vms (currently 2)
     copy: >
       src="{{ git_ansible_checkout_dir }}/deploy/config/{{ inventory_hostname }}/{{ item }}/"
       dest="{{ host_sharing_guerilla_dir }}/{{ item }}/DataDir/configworker.json"
       owner="{{ host_shared_owner }}""
     with_items:
       - vm1
       - vm2

   - name: sync vms
     synchronize: src={{ target_vm_dir }} dest="{{ host_vm_dir_parent }}" archive=yes perms=yes recursive=yes

   - name: stat dhcpd.config
     stat: path="/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf.orig"
     register: dhcpd_stat

   - name: backup dhcpd.config
     command: cp "/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf" "/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf.orig"
     when: dhcpd_stat.stat.exists == False

   - name: restore dhcpd.config
     command: cp "/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf.orig" "/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf"

   - name: copy config file fragment
     copy: src="dhcpd-conf-addition.conf" dest="/Library/Preferences/VMware Fusion/vmnet8"

   - name: append conf-addition-conf to dhcpd.conf
     shell: cat "/Library/Preferences/VMware Fusion/vmnet8/dhcpd-conf-addition.conf" >> "/Library/Preferences/VMware Fusion/vmnet8/dhcpd.conf"
